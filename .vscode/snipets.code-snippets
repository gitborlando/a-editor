{
  // Place your blog 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Component": {
    "prefix": "comp",
    "body": [
      "import { FC, memo } from 'react'",
      "import { Flex } from '~/view/ui-utility/widget/flex'",
      "",
      "type I$1${TM_FILENAME_BASE}Comp = {}",
      "",
      "export const $1${TM_FILENAME_BASE}Comp: FC<I$1${TM_FILENAME_BASE}Comp> = memo(({}) => {",
      "  return <Flex layount='c' className={classes.$1${TM_FILENAME_BASE}}></Flex>",
      "})",
      "",
      "",
      "$1${TM_FILENAME_BASE}Comp.displayName = '$1${TM_FILENAME_BASE}Comp'"
    ],
    "description": "Component"
  },
  "Component2": {
    "prefix": "comp",
    "body": [
      "import { FC, memo } from 'react'",
      "import { makeStyles } from '~/view/ui-utility/theme'",
      "import { Flex } from '~/view/ui-utility/widget/flex'",
      "",
      "type I$1${TM_FILENAME_BASE}Comp = {}",
      "",
      "export const $1${TM_FILENAME_BASE}Comp: FC<I$1${TM_FILENAME_BASE}Comp> = memo(({}) => {",
      "  const { classes } = useStyles({})",
      "  return <Flex className={classes.$1${TM_FILENAME_BASE}}></Flex>",
      "})",
      "",
      "",
      "type I$1${TM_FILENAME_BASE}CompStyle = {} /* & Required<Pick<I$1${TM_FILENAME_BASE}Comp>> */ /* & Pick<I$1${TM_FILENAME_BASE}Comp> */",
      "",
      "const useStyles = makeStyles<I$1${TM_FILENAME_BASE}CompStyle>()((t) => ({",
      "  $1${TM_FILENAME_BASE}: {",
      "    ...t.rect('100%', 30, 'no-radius', 'white'),",
      "  },",
      "}))",
      "",
      "$1${TM_FILENAME_BASE}Comp.displayName = '$1${TM_FILENAME_BASE}Comp'"
    ],
    "description": "Component"
  },
  "Sub Component": {
    "prefix": "subcomp",
    "body": [
      "const $1Comp = useMemoComp([], ({}) => {",
      "  return (<Flex className={''}></Flex>)",
      "})"
    ],
    "description": "Sub Component"
  },
  "Widget": {
    "prefix": "widget",
    "scope": ["typescriptreact"],
    "body": [
      "import { ComponentPropsWithRef, forwardRef } from 'react'",
      "import { makeStyles } from '~/view/ui-utility/theme'",
      "import { Flex } from '~/view/ui-utility/widget/flex'",
      "",
      "export type I$1${TM_FILENAME_BASE} = ComponentPropsWithRef<'div'> & {}",
      "",
      "export const $1${TM_FILENAME_BASE} = forwardRef<HTMLDivElement, I$1${TM_FILENAME_BASE}>(({ className, ...rest }, ref) => {",
      "  const { classes, cx } = useStyles({})",
      "  return <Flex className={cx(classes.$1${TM_FILENAME_BASE}, className)} {...rest} ref={ref}></Flex>",
      "})",
      "",
      "type I$1${TM_FILENAME_BASE}Style = {} /* & Required<Pick<I$1${TM_FILENAME_BASE}>> */ /* & Pick<I$1${TM_FILENAME_BASE}> */",
      "",
      "const useStyles = makeStyles<I$1${TM_FILENAME_BASE}Style>()((t) => ({",
      "  $1${TM_FILENAME_BASE}: {},",
      "}))",
      "",
      "$1${TM_FILENAME_BASE}.displayName = '$1${TM_FILENAME_BASE}'",
      ""
    ],
    "description": "Widget"
  },
  "Service": {
    "prefix": "service",
    "body": [
      "import autobind from 'class-autobind-decorator'",
      "",
      "@autobind",
      "export class $1${TM_FILENAME_BASE}Service {",
      "  initHook() {",
      "  }",
      "}",
      "",
      "export const $1${TM_FILENAME_BASE} = new $1${TM_FILENAME_BASE}Service()",
      ""
    ],
    "description": "Service"
  },
  "Flex": {
    "prefix": "flex",
    "body": ["<Flex layout='$1' className={}></Flex>"],
    "description": "flex"
  }
}
